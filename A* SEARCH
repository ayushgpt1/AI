import heapq

def a_star(graph, start, goal, h):
    open_list = [(0, start)]  # Priority queue with (f-score, node)
    g_score = {node: float('inf') for node in graph}  # Initialize g-scores
    g_score[start] = 0
    came_from = {}  # To reconstruct the path

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:  # Goal reached, reconstruct the path
            return reconstruct_path(came_from, current)

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + h[neighbor]
                heapq.heappush(open_list, (f_score, neighbor))

    return None  # No path found

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]  # Return reversed path

# Example usage
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'D': 2, 'E': 5},
    'C': {'A': 4, 'F': 3},
    'D': {'B': 2},
    'E': {'B': 5, 'F': 1},
    'F': {'C': 3, 'E': 1}
}

h = {'A': 7, 'B': 6, 'C': 2, 'D': 5, 'E': 3, 'F': 0}  # Heuristics

path = a_star(graph, 'A', 'F', h)
print("Path found:", path if path else "No path found")
